@page "/Game"
<h5>Kliknij w obszar gry, aby rozpocząć</h5>


<div id="gaming-area" tabindex="0" style="height:@boxSizePx;width:@boxSizePx;background-color:black" @onkeydown="SaveKeyboardAction">

    @foreach (var block in _snake)
    {
        <SnakeElement BoxSize="boxSize" FieldsInLine="fieldsInLine" X="block.X" Y="block.Y" />

    }
    <FoodElement BoxSize="boxSize" FieldsInLine="fieldsInLine" X="_food.X" Y="_food.Y" />
</div>


<h5>Twoje punkty: <strong>@points</strong></h5>

@if (scores.Count != 0)
{
    <h5>Poprzednie wyniki:</h5>
    @foreach (var score in scores)
    {
        <strong>@score ,</strong>
    }

    <hr />
    <h5>Najlepszy wynik: @scores.Max()</h5>


}


@code
{
    private int boxSize = 400;
    private int fieldsInLine = 20;
    private int interval = 100;

    // TODO Change to LinkedList<SnakeBlock> _snake;
    private LinkedList<SnakeBlock> _snake;
    private List<int> scores = new List<int>();
    private String currentDirection = "D";
    private FoodBlock _food;
    private int points = 0;

    protected override async Task OnInitializedAsync()
    {
        _snake = new LinkedList<SnakeBlock>();
        _snake.AddFirst(new SnakeBlock(0, 0));
        _snake.AddFirst(new SnakeBlock(1, 0));
        _snake.AddFirst(new SnakeBlock(2, 0));
        _snake.AddFirst(new SnakeBlock(3, 0));

        _food = new FoodBlock(fieldsInLine, _snake);

        _ = Clock();
    }
    private void SaveKeyboardAction(KeyboardEventArgs args)
    {
        if (args.Key.ToUpper() != "W" && args.Key.ToUpper() != "A" && args.Key.ToUpper() != "S" && args.Key.ToUpper() != "D")
        {
            return;
        }
        else currentDirection = args.Key.ToUpper();

    }
    private async Task Clock()
    {
        while (true)
        {


            //dodajemy
            var head = GenerateNewOne(_snake.Min().X, _snake.Min().Y);
            _snake.AddFirst(head);

            //czy zjadl jedzenie
            var foodFound = head.Equals(_food);
            if (foodFound)
            {
                _food = new FoodBlock(fieldsInLine, _snake);
                points = _snake.Count - 4;
            }

            else
            {

                //usuwamy ogon
                _snake.RemoveLast();
            }


            //sprawdzamy czy nie zjadl siebie

            if (_snake.Count(e => e.Equals(head)) > 1)
            {
                ResetGame();
                break;
            }

            //zmiana stanu
            StateHasChanged();
            //usypiamy watek zgodnie z interwalem

            await Task.Delay(interval);
        }
    }

    private SnakeBlock GenerateNewOne(int x, int y)
    {
        switch (currentDirection)
        {
            case "W":
                y--;
                break;

            case "S":
                y++;
                break;
            case "A":
                x--;
                break;
            case "D":
                x++;
                break;

        }

        if (x == fieldsInLine) x = 0;

        if (x < 0) x = fieldsInLine - 1;



        if (y == fieldsInLine) y = 0;

        if (y < 0) y = fieldsInLine - 1;

        return new SnakeBlock(x, y);

    }

    private string boxSizePx
    {
        get => $"{boxSize}px";
    }


    private void ResetGame()
    {

        while (_snake.Count > 4)
        {
            _snake.RemoveLast();
        }
        if (points != 0)
        {
            scores.Add(points);
            points = 0;
        }
        Clock().Start();
    }

}